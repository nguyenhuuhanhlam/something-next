const  endpointUrl = "https://aresen.bitrix24.com/rest/11/suhucg4bufbf3bwe"


const apiContactListEndpoint = endpointUrl + "/crm.contact.list"
const apiContactUserFieldListEndpoint = endpointUrl + "/crm.contact.userfield.list"
const apiCompanyListEndpoint = endpointUrl + "/crm.company.list"

const honorific = {
  HNR_EN_1:'Mr.',
  HNR_EN_2:'Mrs.',
  HNR_EN_3:'Ms.',
  HNR_EN_4:'Dr.'
}


/** 
 * 
 * CONTACT STATICS 
 * 
 * */

const CONTACTUFs = {
  HOBBY:'UF_CRM_1649409773',
  CHARACTER:'UF_CRM_1649409787',
  DESCRIPTION:'UF_CRM_62734757533E5',
  PROVINCE:'UF_CRM_6273475910A74',
  BUSINESS_SECTORS:'UF_CRM_1652257371',
  CLIENT_TYPE:'UF_CRM_1649410078',
  ACCOUNT:'UF_CRM_640EDC74A6166',
  SUPPLIER_TYPE:'UF_CRM_1680663361'
}

 const CONTACTCOLNAMEs = {
  ID: 'Id',
  HONORIFIC: 'Salutation',
  POST: 'Position',
  LAST_NAME: 'Last Name',
  SECOND_NAME: 'Middle Name',
  NAME: 'Name',
  PHONE: 'Phone',
  EMAIL: 'Email',
  COMPANY_ID: 'Company',  
  BIRTHDATE: 'Birthday',
  [CONTACTUFs.PROVINCE]: 'Province',
  [CONTACTUFs.CLIENT_TYPE]: 'Status',
  [CONTACTUFs.ACCOUNT]:'Account',
  TYPE_ID:'Contact type',
  DATE_MODIFY:'Modified',
  [CONTACTUFs.SUPPLIER_TYPE]:'Supplier type',
  ASSIGNED_BY_ID:'Responsible',
  DATE_CREATE:'Created date'
}

/** 
 * 
 * CONTACT QUERY 
 * 
 * */
let contactQuery = {
  select:[
    'ID',
    'HONORIFIC',
    'LAST_NAME',
    'SECOND_NAME',
    'NAME',
    'PHONE',
    'EMAIL',
    'BIRTHDATE',
    'COMPANY_ID',
    'POST',
    CONTACTUFs.PROVINCE,
    CONTACTUFs.CLIENT_TYPE,
    CONTACTUFs.ACCOUNT,
    'TYPE_ID',
    'DATE_MODIFY',
    CONTACTUFs.SUPPLIER_TYPE,
    'ASSIGNED_BY_ID',
    'DATE_CREATE'
  ],
  start:0
}
var contactColumns = [contactQuery.select.map(v=>v=CONTACTCOLNAMEs[v])]
/** END */

function getCONTACTValue(v,ufs,cos) {
  let result = {}
  contactQuery.select.map(m=>{
    switch(m) {
      case 'ID': result[m]=v.ID; break
      case 'HONORIFIC': result[m]=honorific[v.HONORIFIC]; break
      case 'POST': result[m]=v.POST; break
      case 'LAST_NAME': result[m]=v.LAST_NAME; break
      case 'SECOND_NAME': result[m]=v.SECOND_NAME; break
      case 'NAME': result[m]=v.NAME; break
      case 'PHONE': result[m]=v.PHONE?(v.PHONE)[0]?.VALUE:null; break
      case 'EMAIL': result[m]=v.EMAIL?(v.EMAIL)[0]?.VALUE:null; break
      case 'BIRTHDATE': result[m]=v.BIRTHDATE.substring(0,10); break
      case 'COMPANY_ID': result[m]=v.COMPANY_ID?cos[v.COMPANY_ID]:null; break
      case CONTACTUFs.CLIENT_TYPE: result[m]=ufs[CONTACTUFs.CLIENT_TYPE]?.LIST.find(o=>o.ID==v[CONTACTUFs.CLIENT_TYPE])?.VALUE; break
      case CONTACTUFs.PROVINCE: result[m]=ufs[CONTACTUFs.PROVINCE]?.LIST.find(o=>o.ID==v[CONTACTUFs.PROVINCE])?.VALUE; break
      case CONTACTUFs.ACCOUNT: result[m]=v[CONTACTUFs.ACCOUNT] && v[CONTACTUFs.ACCOUNT].map(v=>ufs[CONTACTUFs.ACCOUNT]?.LIST.find(o=>o.ID==v)?.VALUE).join() || null; break
      case 'TYPE_ID': result[m]=v.TYPE_ID; break
      case 'DATE_MODIFY': result[m]=v.DATE_MODIFY.substring(0,10); break
      case CONTACTUFs.SUPPLIER_TYPE: result[m]=ufs[CONTACTUFs.SUPPLIER_TYPE]?.LIST.find(o=>o.ID==v[CONTACTUFs.SUPPLIER_TYPE])?.VALUE; break
      case 'ASSIGNED_BY_ID': result[m]=users[v.ASSIGNED_BY_ID]; break
      case 'DATE_CREATE': result[m]=v.DATE_CREATE.substring(0,10); break
    }
  })
  return result
}

const fetchContactUFs=()=>{
  let response = UrlFetchApp.fetch(apiContactUserFieldListEndpoint) 
  let data = JSON.parse(response.getContentText())
  let result = []
  data.result.map(v=>result[v.FIELD_NAME]=v)
  return result
}

function fetchCONTACTS() {
  /** PREPARE */
  let options = { method:"post",contentType:"application/json",payload:JSON.stringify(contactQuery) }

  let UFList = fetchContactUFs()
  let Companies = fetchCOMPANIES()

  /** 1. */
  let response = UrlFetchApp.fetch(apiContactListEndpoint,options)
  let data = JSON.parse(response.getContentText())
  let result = data.result.map(v=>Object.values(getCONTACTValue(v,UFList,Companies))) /** IMPORTANT */

  /** 2. */
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('ContactData')
  sheet.clearContents()
  sheet.getRange(1,1,1,contactColumns[0].length).setValues(contactColumns) /** COLUMN HEADER */

  // console.log(Companies['49'])
  // return

   /** 3. */
  let page_size = 50
  if(data.next)
  {
    for (let i=1; i<=Math.floor(data.total/page_size); i++)
    {
      contactQuery.start=i*page_size
      let response = UrlFetchApp.fetch(apiContactListEndpoint,{...options,payload:JSON.stringify(contactQuery)})
      let data = JSON.parse(response.getContentText())
      let contacts = data.result

      for (let j=0; j<contacts.length; j++) {
        let contact=contacts[j]
        result.push(Object.values(getCONTACTValue(contact,UFList,Companies)))
      }
    }
  }

  /** 4. */
  sheet.getRange(2, 1,result.length,Object.keys(result[0]).length).setValues(result)
}